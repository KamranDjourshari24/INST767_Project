remove_2010_2011() %>%
clean_NAs() %>%
mutate(x_entry_user = case_when(
is.na(x_entry_user) ~ y_entry_user,
TRUE ~ x_entry_user
)) %>%
left_join(ap_reporter_email_crosswalk)
# Identify columns where data no longer being collected
ap_case_complete_skip_cols <- ap_case_complete |>
select_if(~ any(str_detect(.,"SKIP - no longer collecting"))) %>%
colnames()
# store list of deaths excluded from project for use in later tables
ap_case_complete_excluded_cases <- ap_case_complete %>%
filter(x_data_progress == "Case excluded from project" | x_data_progress == "In limbo" | y_data_progress == "Case excluded from project" | y_data_progress == "In limbo" | y_data_progress == "Ongoing" | is.na(y_data_progress) == TRUE | y_data_progress == "Limbo stub" | y_data_progress == "Excluded stub") %>%
select(d_state_of_death:d_first_name,x_data_progress,y_data_progress) %>%
arrange(x_data_progress,d_state_of_death,d_year_death,d_last_name,d_first_name)
# remove cases marked `Case excluded from project`
# remove no longer collecting cols
ap_case_complete <- ap_case_complete |>
select(-all_of(ap_case_complete_skip_cols)) %>%
anti_join(ap_case_complete_excluded_cases, by = join_by(d_state_of_death, d_year_death, d_last_name, d_first_name, x_data_progress, y_data_progress))
# read in data
# remove 2010 and 2011 cases
# remove officers in excluded cases
ap_officer_master <- read_sheet(
ap_harvester_path,
sheet="officers",
col_names=TRUE,
col_types = c(.default="c")) |>
remove_2010_2011() %>%
anti_join(ap_case_complete_excluded_cases) %>%
standardize_o_agency_name()  %>%
left_join(ap_reporter_email_crosswalk, by=c("z_entry_user" = "x_entry_user"))
# read in data
# remove 2010 and 2011 cases
# remove videos in excluded cases
ap_video_logs <- read_sheet(
ap_harvester_path,
sheet="video_logs",
col_names=TRUE,
col_types = c(.default="c")) |>
select(all_of(death_id_cols), contains("v")) |>
remove_2010_2011() %>%
anti_join(ap_case_complete_excluded_cases) %>%
left_join(ap_reporter_email_crosswalk, by=c("v_entry_user" = "x_entry_user"))
# read in video embed information
ap_video_logs_embed <- read_sheet(
ap_video_logs_embed_path,
sheet="embeds_known",
col_names=TRUE,
col_types = c(.default="c")) |>
select(all_of(death_id_cols), contains("v"))
# connect embed to video logs
ap_video_logs <- ap_video_logs %>%
left_join(ap_video_logs_embed) %>%
mutate(v_missing_status = if_else(is.na(v_missing_status), "video not in embed code sheet", v_missing_status)) %>%
mutate(v_embed_code = case_when(
is.na(v_embed_code) ~ paste0("<br><br>**Cannot embed because ",v_missing_status,"**<br><br>"),
TRUE ~ v_embed_code
)) %>%
mutate(v_file_link = case_when(
!is.na(v_file_link) ~ v_file_link,
is.na(v_file_link) & !is.na(v_folder_link) ~ v_folder_link,
is.na(v_file_link) & is.na(v_folder_link) ~ "https://apgbl.sharepoint.com/sites/ProjectCamero/",
TRUE ~ "Other"
))
# extract officer status from ap_officer_master
ap_officer_master_role <- ap_officer_master |>
select(all_of(officer_groups), o_ap_role = o_role)
# load hc_officer_main
# distinct it to keep latest entry, something we have to do because we don't have a helen style one row per death sheet we're pulling from
# connect to ap_officer_master to pull role from that sheet
# clean up two list cols
# remove officers in excluded cases
hc_officer_main <- read_sheet(hc_harvester_path,
sheet="entry",
col_types = c(.default="c"),
col_names = all_var_names$hc_officer) |>
rowid_to_column() |>
mutate(last_update = as_datetime(last_update)) |>
arrange_at(c(officer_groups, "rowid")) |>
group_by(across(matches(officer_groups))) |>
slice_tail(n=1) |>
ungroup() |>
# clean simple list: Removes quotes and brackets, delimiter is "; "
mutate(across(c(training_list, reporter_name), clean_simple_list)) |>
left_join(ap_officer_master_role, by=officer_groups) |>
remove_2010_2011() %>%
anti_join(ap_case_complete_excluded_cases) %>%
rename(o_agency_name = incident_agency) %>%
standardize_o_agency_name() %>%
rename(incident_agency = o_agency_name)
rm(ap_officer_master_role)
# note that fixing akron is necessary because it fucks up the string split later on
ap_case_complete_relational_col_df <- ap_case_complete |>
select_if(~ any(str_detect(.,"^\\["))) |>
bind_cols(ap_case_complete |> select(all_of(death_id_cols))) |>
select(all_of(death_id_cols), everything()) |>
select(-contains("factcheck_started")) |>
mutate(i_le_agencies = str_replace(i_le_agencies,"Akron, PA, Police Dept","Akron PA Police Dept"))
ap_case_complete_relational_cols <- ap_case_complete_relational_col_df |>
select(-all_of(death_id_cols)) |>
colnames()
create_relational_tables(ap_case_complete_relational_col_df,d_background_info)
create_relational_tables(ap_case_complete_relational_col_df,d_officer_intel)
create_relational_tables(ap_case_complete_relational_col_df,i_deescalation)
create_relational_tables(ap_case_complete_relational_col_df,i_deceased_actions_before_force)
create_relational_tables(ap_case_complete_relational_col_df,i_uof_type)
create_relational_tables(ap_case_complete_relational_col_df,i_police_actions_after_handcuffed)
create_relational_tables(ap_case_complete_relational_col_df,i_mitigating_circ)
create_relational_tables(ap_case_complete_relational_col_df,a_oversight_bodies)
create_relational_tables(ap_case_complete_relational_col_df,a_lawsuit_filed)
create_relational_tables(ap_case_complete_relational_col_df,me_death_flags)
create_relational_tables(ap_case_complete_relational_col_df,x_theme)
create_relational_tables(ap_case_complete_relational_col_df,x_records_withheld)
create_relational_tables(ap_case_complete_relational_col_df,i_le_agencies)
# Standardize the i_le_agencies table
ap_case_complete_i_le_agencies <- ap_case_complete_i_le_agencies %>%
rename(o_agency_name = i_le_agencies) %>%
standardize_o_agency_name() %>%
rename(i_le_agencies = o_agency_name)
###
# Create relational table dataframe with urls
###
# https://hcreports.s3.amazonaws.com/harvester_web_app/deaths/alabama/2018/joseph_pettaway/joseph_pettaway.html
# https://data-projects.ap.org/police-custody-records/deaths/alabama/2018/joseph_pettaway/joseph_pettaway.html
ap_case_complete_u_urls <- ap_case_complete %>%
select(d_state_of_death:d_first_name, x_data_progress) %>%
mutate(death_info = paste0(d_state_of_death," | ", d_year_death, " | ", d_first_name, " ",d_last_name)) %>%
mutate(death_info_w_status = paste0(death_info," | Status: ",x_data_progress)) %>%
mutate(d_state_of_death_clean = d_state_of_death,
d_year_death_clean = d_year_death,
d_last_name_clean = d_last_name,
d_first_name_clean = d_first_name) %>%
mutate(across(
c(d_state_of_death_clean, d_year_death_clean, d_last_name_clean, d_first_name_clean),
str_to_lower)) %>%
mutate(across(
c(d_state_of_death_clean, d_year_death_clean, d_last_name_clean, d_first_name_clean),
~str_remove_all(.,"[[:punct:]]")))  %>%
mutate(across(
c(d_state_of_death_clean, d_year_death_clean, d_last_name_clean, d_first_name_clean),
~str_replace_all(.," ","_"))) %>%
mutate(death_url =  paste0(
#"https://hcreports.s3.amazonaws.com/harvester_web_app/deaths/",
"https://data-projects.ap.org/police-custody-records/deaths/",
d_state_of_death_clean,"/", d_year_death_clean, "/", d_first_name_clean, "_",d_last_name_clean,"/", d_first_name_clean, "_",d_last_name_clean,".html")) %>%
# fix the jr_problem oregon/2012/christopherjr_ladue oregon/2012/christopherjr_ladue florida/2013/geraldjr_altomare/ california/2015/henryjr_medina/
mutate(death_url = str_replace_all(death_url,"_jr_","jr_")) %>%
mutate(death_url_html = paste0(
'<a href="',death_url,'" target="_blank">Link</a>'
)) %>%
select(d_state_of_death:d_first_name,death_info,death_info_w_status,death_url, death_url_html)
ap_case_complete <- ap_case_complete |>
select(-all_of(ap_case_complete_relational_cols))
ap_case_complete_plus_relational_cols <- ap_case_complete %>%
join_and_collapse_relational_table(
ap_case_complete_d_background_info,
d_background_info
) %>%
join_and_collapse_relational_table(
ap_case_complete_d_officer_intel,
d_officer_intel
) %>%
join_and_collapse_relational_table(
ap_case_complete_i_le_agencies,
i_le_agencies
) %>%
join_and_collapse_relational_table(
ap_case_complete_i_deescalation,
i_deescalation
) %>%
join_and_collapse_relational_table(
ap_case_complete_i_deceased_actions_before_force,
i_deceased_actions_before_force
) %>%
join_and_collapse_relational_table(
ap_case_complete_i_uof_type,
i_uof_type
) %>%
join_and_collapse_relational_table(
ap_case_complete_i_police_actions_after_handcuffed,
i_police_actions_after_handcuffed
) %>%
join_and_collapse_relational_table(
ap_case_complete_i_mitigating_circ,
i_mitigating_circ
) %>%
join_and_collapse_relational_table(
ap_case_complete_a_oversight_bodies,
a_oversight_bodies
) %>%
join_and_collapse_relational_table(
ap_case_complete_a_lawsuit_filed,
a_lawsuit_filed
) %>%
join_and_collapse_relational_table(
ap_case_complete_me_death_flags,
me_death_flags
) %>%
join_and_collapse_relational_table(
ap_case_complete_x_theme,
x_theme
) %>%
join_and_collapse_relational_table(
ap_case_complete_x_records_withheld,
x_records_withheld
)
rm(ap_case_complete_relational_col_df)
ap_officer_master_relational_col_df <- ap_officer_master |>
select_if(~ any(str_detect(.,"^\\["))) |>
bind_cols(ap_officer_master |> select(all_of(officer_groups))) |>
select(all_of(officer_groups), everything())
# Will eventually use a map function to process this, but passing variables is an issue for now
ap_officer_master_relational_cols <- ap_officer_master_relational_col_df |>
select(-all_of(officer_groups)) |>
colnames()
# Will eventually use a map function to process this, but passing variables is an issue for now
create_relational_tables(ap_officer_master_relational_col_df,o_past_misconduct)
ap_officer_master_u_urls <- ap_officer_master %>%
standardize_o_agency_name() %>%
select(d_state_of_death:o_agency_name,o_role) %>%
mutate(officer_info = paste0(o_first_name," ", o_last_name, " | ", str_to_title(d_state_of_death), " | ", str_to_title(o_agency_name), " | Role: ", o_role)) %>%
mutate(d_state_of_death_clean = d_state_of_death,
d_year_death_clean = d_year_death,
d_last_name_clean = d_last_name,
d_first_name_clean = d_first_name,
o_last_name_clean = o_last_name,
o_first_name_clean = o_first_name,
o_agency_name_clean = o_agency_name
) %>%
mutate(across(
c(d_state_of_death_clean, d_year_death_clean, d_last_name_clean, d_first_name_clean,o_last_name_clean,o_first_name_clean,o_agency_name_clean),
str_to_lower)) %>%
mutate(across(
c(d_state_of_death_clean, d_year_death_clean, d_last_name_clean, d_first_name_clean,o_last_name_clean,o_first_name_clean,o_agency_name_clean),
~str_remove_all(.,"[[:punct:]]")))  %>%
mutate(across(
c(d_state_of_death_clean, d_year_death_clean, d_last_name_clean, d_first_name_clean,o_last_name_clean,o_first_name_clean,o_agency_name_clean),
~str_replace_all(.," ","_"))) %>%
mutate(officer_url = paste0(
#"https://hcreports.s3.amazonaws.com/harvester_web_app/officers/",
"https://data-projects.ap.org/police-custody-records/officers/",
d_state_of_death_clean,"/",o_agency_name_clean,"/",o_last_name_clean,"_",o_first_name_clean,"/",o_last_name_clean,"_",o_first_name_clean,".html")) %>%
mutate(officer_url_html = paste0(
'<a href="',officer_url,'" target="_blank">Link</a>'
)) %>%
select(d_state_of_death, d_year_death, d_last_name, d_first_name,o_last_name,o_first_name,o_agency_name,officer_info,officer_url, officer_url_html)
ap_officer_master_plus_relational_cols <- ap_officer_master
ap_officer_master <- ap_officer_master |>
select(-all_of(ap_officer_master_relational_cols))
rm(ap_officer_master_relational_col_df)
hc_officer_main_relational_col_df <- hc_officer_main |>
select_if(~ any(str_detect(.,"^\\["))) |>
bind_cols(hc_officer_main |> select(rowid,all_of(officer_groups))) |>
select(rowid,all_of(officer_groups), everything())
# Will eventually use a map function to process this, but passing variables is an issue for now
hc_officer_main_relational_cols <- hc_officer_main_relational_col_df |>
select(-all_of(officer_groups),-rowid) |>
colnames()
###
# Create relational table dataframes for hc_officer_main
###
create_relational_tables_hc(hc_officer_main_relational_col_df,employment_block,all_var_names$hc_employment)
create_relational_tables_hc(hc_officer_main_relational_col_df,incident_block,all_var_names$hc_incident_block)
create_relational_tables_hc(hc_officer_main_relational_col_df,overflow_incident_block,all_var_names$hc_incident_block)
create_relational_tables_hc(hc_officer_main_relational_col_df,news,all_var_names$hc_news)
create_relational_tables_hc(hc_officer_main_relational_col_df,social,all_var_names$hc_social)
hc_officer_main_employment_block <-  hc_officer_main_employment_block %>%
rename(o_agency_name = agency_employer) %>%
standardize_o_agency_name() %>%
rename(agency_employer = o_agency_name)
hc_officer_main_incident_block <-  hc_officer_main_incident_block %>%
rename(o_agency_name = i_agency) %>%
standardize_o_agency_name() %>%
rename(i_agency = o_agency_name) %>%
rename(o_agency_name = invest_agency) %>%
standardize_o_agency_name() %>%
rename(invest_agency = o_agency_name)
hc_officer_main_overflow_incident_block <-  hc_officer_main_overflow_incident_block %>%
rename(o_agency_name = i_agency) %>%
standardize_o_agency_name() %>%
rename(i_agency = o_agency_name) %>%
rename(o_agency_name = invest_agency) %>%
standardize_o_agency_name() %>%
rename(invest_agency = o_agency_name)
hc_officer_main <- hc_officer_main |>
select(-all_of(hc_officer_main_relational_cols))
rm(hc_officer_main_relational_col_df)
# one row per death for others
get_doc_cloud_links_deaths(ap_case_complete, death_id_cols)
get_doc_cloud_links_deaths(ap_officer_master, officer_groups)
get_doc_cloud_links_deaths(ap_video_logs, death_id_cols)
# one row per link version for embed
get_doc_cloud_links_deaths_long(ap_case_complete, death_id_cols)
get_doc_cloud_links_deaths_long(ap_officer_master, officer_groups)
get_doc_cloud_links_deaths_long(ap_video_logs, death_id_cols)
hc_officer_df_list <- c("hc_officer_main_employment_block",
"hc_officer_main_incident_block",
"hc_officer_main_news",
"hc_officer_main_social",
"hc_officer_main_overflow_incident_block",
"hc_officer_main"
)
hc_officer_main_doc_cloud_links <- map_dfr(hc_officer_df_list,get_doc_cloud_links_hc_officer_one_df) %>%
group_by(across(all_of(officer_groups))) %>%
distinct(split_links) %>%
summarize(doc_cloud_links = str_c(split_links, collapse="\n"),
.groups="drop")
###
# Standardize agency names for hc_officer_main, ap_case_complete
###
# still need to figure out kansas city and keep an eye on this
ap_officer_master <- standardize_o_agency_name(ap_officer_master)
ap_case_complete_i_le_agencies <- ap_case_complete_i_le_agencies %>%
rename(o_agency_name = i_le_agencies) %>%
standardize_o_agency_name()
hc_officer_main <- hc_officer_main %>%
rename(o_agency_name = incident_agency) %>%
standardize_o_agency_name()
standardized_cause_manner_death <- load_standardized_cause_manner_death()
# a set of functions that loads variables
source(here("build_scripts/update_core_data/update_core_data_functions/classification_functions.R"))
state_crosswalk <- build_state_crosswalk()
ap_case_complete_i_le_agencies_w_na <- ap_case_complete %>%
select(all_of(death_id_cols)) |>
left_join(ap_case_complete_i_le_agencies) %>%
distinct()
ap_case_complete_and_officer_master_agencies <- ap_officer_master %>%
select(all_of(death_id_cols), o_agency_name) %>%
distinct() |>
bind_rows(ap_case_complete_i_le_agencies_w_na) %>%
distinct() |>
ungroup() |>
group_by_at(all_of(death_id_cols)) |>
mutate(count_na_in_group = sum(is.na(o_agency_name))) |>
mutate(count_all_in_group = n()) |>
mutate(named_agency_and_na_in_group = case_when(
count_na_in_group > 0 & count_all_in_group > 1 ~ "na_plus_named_in_group",
count_na_in_group > 0 & count_all_in_group == 1 ~ "na_only",
TRUE ~ "others"
)) |>
mutate(named_agency_and_na_in_group_na_in_row = case_when(
named_agency_and_na_in_group == "na_plus_named_in_group" & is.na(o_agency_name) ~ "na_plus_named_in_group_na_row",
TRUE ~ "other"
)) |>
filter(named_agency_and_na_in_group_na_in_row != "na_plus_named_in_group_na_row") |>
arrange_at(all_of(death_id_cols)) |>
select(all_of(death_id_cols),o_agency_name) |>
ungroup() %>%
mutate(agency_info = paste0(
d_state_of_death, " | ", str_to_title(o_agency_name)
)) %>%
mutate(d_state_of_death_clean = d_state_of_death,
o_agency_name_clean = o_agency_name
) %>%
mutate(across(
c(d_state_of_death_clean,o_agency_name_clean),
str_to_lower)) %>%
mutate(across(
c(d_state_of_death_clean,o_agency_name_clean),
~str_remove_all(.,"[[:punct:]]")))  %>%
mutate(across(
c(d_state_of_death_clean,o_agency_name_clean),
~str_replace_all(.," ","_"))) %>%
mutate(agency_url = paste0(
#"https://hcreports.s3.amazonaws.com/harvester_web_app/agencies/",
"https://data-projects.ap.org/police-custody-records/agencies/",
d_state_of_death_clean,"/",o_agency_name_clean,"/",o_agency_name_clean, ".html")) %>%
select(d_state_of_death:o_agency_name,agency_info,agency_url)
me_agency_standard <- create_me_agency_standard()
unlink(here("data/core_data/"), recursive = TRUE)
View(cause_death_indicator_table)
View(cause_plus_contrib_death_indicator_table)
unlink(here("data/core_data/"), recursive = TRUE)
dfs_to_write <- names(which(unlist(eapply(.GlobalEnv,is.data.frame))))
map(dfs_to_write, write_out_dataframe)
dir.create(here("data/core_data/web_artifacts/"))
write_rds(ap_case_complete_skip_cols,here("data/core_data/web_artifacts/ap_case_complete_skip_cols_list.rds"))
write_rds(ap_reporter_email_crosswalk,here("data/core_data/web_artifacts/ap_reporter_email_crosswalk.rds") )
write_rds(standardized_cause_manner_death,here("data/core_data/ap_case_complete/ap_case_complete_relational_tables/ap_case_complete_standardized_cause_manner_death.rds"))
unlink(here("data/core_data/ap_reporter_email/"), recursive = TRUE)
#############################################################
# Clean environs ############################################
#############################################################
rm(list=ls())
gc()
#| label: load_libraries_settings_functions_data
#| include: false
###
# Load libraries
###
library(here)
source(here("analysis/functions/load_libraries_functions.R"))
###
# Load style functions
###
source(here("analysis/functions/style_functions.R"))
###
# Load data
###
source(here("analysis/functions/load_data_functions.R"))
###
# Load a factchecked cols only version of ap_case_complete
###
# Load factchecked cols from helen's sheet
factcheck_cols <- read_sheet("https://docs.google.com/spreadsheets/d/1_fZ8FTLq1YAMM3mOuupuovGQRygQP62xHA8iszsDViI/edit#gid=136068152") %>%
select(-contains("fact_check"),-contains("factcheck"),-contains("time_locked")) %>%
colnames()
ap_case_complete_factcheck_only_cols <- ap_case_complete %>%
select(all_of(factcheck_cols))
# To do:
# confirm that cause/cause plus are used when appropriate, not what's in harvester?
View(cause_death_indicator_table)
View(cause_plus_contrib_death_indicator_table)
View(ap_agencies)
x <- ap_agencies %>% distinct(d_state_of_death,o_agency_name)
View(x)
load("~/Desktop/git_repos/hc_ap_police_umd_asu_analysis/data/external_data/lear_2016/DS0001/36697-0001-Data.rda")
View(da36697.0001)
View(da36697.0001)
da36697.0001 %>% count(SAMPTYPE)
library(tidycensus)
# Analysis sentence generated programatically
df_10_01 <- ap_officer_master %>%
filter(o_charged == "Yes") %>%
select(1:4, o_charged) %>%
distinct() %>%
right_join(ap_case_complete_factcheck_only_cols) %>%
select(1:4, o_charged) %>%
mutate(o_charged = if_else(is.na(o_charged), "No or unknown",o_charged))
View(df_10_01)
sheet_write(df_10_01, "https://docs.google.com/spreadsheets/d/19HhXYtJv-NJFeiddV4KbVt_Dp-V2gNUfi8lqnKESUPc/edit#gid=0")
sheet_write(df_10_01, "https://docs.google.com/spreadsheets/d/19HhXYtJv-NJFeiddV4KbVt_Dp-V2gNUfi8lqnKESUPc/edit#gid=0")
#| label: load_libraries_settings_functions_data
#| include: false
###
# Load libraries
###
library(here)
source(here("analysis/functions/load_libraries_functions.R"))
###
# Load style functions
###
source(here("analysis/functions/style_functions.R"))
###
# Load data
###
source(here("analysis/functions/load_data_functions.R"))
setwd("~/Desktop/git_repos/hc_ap_police_umd_asu_analysis/analysis/_j_story_notebooks_published")
#| label: load_libraries_settings_functions_data
#| include: false
###
# Load libraries
###
library(here)
source(here("analysis/functions/load_libraries_functions.R"))
###
# Load style functions
###
source(here("analysis/functions/style_functions.R"))
###
# Load data
###
source(here("analysis/functions/load_data_functions.R"))
###
# Load data
###
source(here("analysis/functions/load_data_functions.R"))
View(cause_death_indicator_table)
df_10_01 <- cause_death_indicator_table %>%
mutate(cause_plus_manner_check = case_when(
me_manner_death != "n/a" & me_cause_death != "n/a" ~ "have both",
TRUE ~ "missing one or other or both"
)) %>%
select(me_manner_death,me_cause_death,cause_plus_manner_check) %>%
group_by(cause_plus_manner_check) %>%
count()
df_10_01 <- cause_death_indicator_table %>%
mutate(cause_plus_manner_check = case_when(
me_manner_death != "n/a" & me_cause_death != "n/a" ~ "have both",
TRUE ~ "missing one or other or both"
)) %>%
select(me_manner_death,me_cause_death,cause_plus_manner_check)
View(df_10_01)
View(df_10_01)
largest_cities <-read_sheet("https://docs.google.com/spreadsheets/d/1gcqu3DcnemeyD3IhL-Ezg8-I4jAPvva9TxhRzvA7PNM/edit#gid=0")
View(largest_cities)
View(ap_case_complete)
largest_cities <- read_sheet("https://docs.google.com/spreadsheets/d/1gcqu3DcnemeyD3IhL-Ezg8-I4jAPvva9TxhRzvA7PNM/edit#gid=0") %>%
inner_join(ap_case_complete)
View(largest_cities)
z <- ap_case_complete_factcheck_only_cols %>% group_by(i_city,i_state) %>% count() %>% arrange(i_state,i_city)
View(z)
largest_cities <- read_sheet("https://docs.google.com/spreadsheets/d/1gcqu3DcnemeyD3IhL-Ezg8-I4jAPvva9TxhRzvA7PNM/edit#gid=0") %>%
inner_join(ap_case_complete)
View(largest_cities)
largest_cities <- read_sheet("https://docs.google.com/spreadsheets/d/1gcqu3DcnemeyD3IhL-Ezg8-I4jAPvva9TxhRzvA7PNM/edit#gid=0") %>%
inner_join(ap_case_complete)
View(largest_cities)
largest_cities <- read_sheet("https://docs.google.com/spreadsheets/d/1gcqu3DcnemeyD3IhL-Ezg8-I4jAPvva9TxhRzvA7PNM/edit#gid=0") %>%
inner_join(ap_case_complete_factcheck_only_cols)
164/1036
View(cause_death_indicator_table)
x <- ap_case_complete_i_uof_type %>% filter(str_detect(i_uof_type,"Prone|prone")) %>% inner_join(cause_plus_contrib_death_indicator_table)
z <- cause_plus_contrib_death_indicator_table %>% filter(str_detect(i_uof_type,"Prone|prone"))
View(z)
reticulate::repl_python()
api_key = "mfou7aOZmxw5Y0DBa772xTs0rkIreQ8Y1zt7oWD9Gnu9uPT4ZUW0NXkBlBXy"
reticulate::repl_python()
setwd("~/Desktop/git_repos/INST767_Project")
reticulate::repl_python()
