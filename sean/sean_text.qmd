---
title: "leagues"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(httr)
library(jsonlite)
library(janitor)
```

```{r}
#library(tidyverse)
#library(httr)
#library(jsonlite)

api_key <- "ZsmqzVHh2cx0AcBaTlnKuV4Wh3XuYSlyYuh6yEDLULKpPa42fnbggIIubhNL"
headers <- c("Authorization" = api_key, "Accept" = "application/json")

soccer_base_url <- "https://api.sportmonks.com/v3/football/teams/seasons/21646?include=players.player"

fetch_data <- function(base_url, headers, pagination_key = "pagination", only_first_page = FALSE,is_team_players=FALSE) {
  
  data <- list()
  url <- base_url
  
  while (!is.null(url)) {
    response <- GET(url, add_headers(.headers = headers))
    
    if (http_status(response)$category == "Success") {
      response_data <- content(response, "parsed")
      data <- c(data, response_data$data)
      
      # Check if there are more pages
      if (exists(pagination_key, response_data) && response_data[[pagination_key]]$has_more) {
        if (only_first_page) {
          # Return only the first page
          break
        } else {
          url <- response_data[[pagination_key]]$next_page
        }
      } else {
        url <- NULL
      }
    } else {
      # Handle error
      print(paste("Error:", http_status(response)$reason))
      break
    }
  }
  
  # Convert to JSON and then to data frame
  data_json <- toJSON(data, auto_unbox = TRUE)
  data_df <- fromJSON(data_json)
  
  if (is_team_players == TRUE) {
    pl_players <- tibble()
    #team_index_id <- 14
    for (team_index_id in c(1:nrow(data_df))) {
      print(paste("Index number:", team_index_id))
      if(team_index_id == 1) {
        
      } else {
        
      #print(team_index_id)

      team_df <- data_df %>%
        slice(team_index_id)
                  print("in function")

      players_df <- team_df$players[[1]]

      team_id <- players_df %>%
        select(team_id) %>%
        distinct(team_id) %>%
        pull(team_id)
    
      player_df <- getElement(players_df,"player") 
      
      player_df <- player_df %>%
        select(country_id) %>%
        mutate(team_id = team_id) %>%
        select(team_id,country_id) %>%
        mutate(country_id = as.character(country_id),
               team_id = as.character(team_id))
#        mutate(across(where(everything), as.character))
      #  mutate(across(where(is.list), as.character))
      
      pl_players <- pl_players %>%
        bind_rows(player_df)

        
      }
      
    }
    return(pl_players)
  } else {
   return(data_df) 
  }
  
  #ata_df <- as.data.frame(fromJSON(data_json)) %>%
  #  mutate_all(as.character)
  

}

current_pl_teams_w_players <- fetch_data(soccer_base_url, headers, only_first_page = FALSE, is_team_players = TRUE) 

##
# Countries
##
# Define API endpoint and authentication
base_url <- "https://api.sportmonks.com/v3/core/countries"
#test_seasons <- fetch_data(base_url, headers, only_first_page = TRUE)
all_countries <- fetch_data(base_url, headers, only_first_page = FALSE, is_team_players = FALSE) %>%
  select(country_id = id, country_name = name, iso3) %>%
  mutate(country_id = as.character(country_id))

current_pl_teams_w_players_country <- current_pl_teams_w_players %>%
  left_join(x)

summary_pl_teams <- current_pl_teams_w_players_country %>%
  group_by(country_name, iso3) %>%
  count(sort=T) %>%
  ungroup() %>%
  mutate(pl_players_pct = round(n/sum(n)*100,2)) %>%
  rename(pl_players_count = n) %>%
  rename(country_code = iso3) %>%
  mutate(country_code = as.character(country_code))

f1_base_url <- "https://api.openf1.org/v1/drivers?session_key=7763"
fetch_f1 <- function(base_url) {
  
    response <- GET(base_url)
    response_data <- content(response, "parsed")
    
    # Convert to JSON and then to data frame
    data_json <- toJSON(response_data, auto_unbox = TRUE)
    data_df <- fromJSON(data_json)
    
    return(data_df)
}

f1_driver <- fetch_f1(f1_base_url) %>%
  group_by(country_code) %>%
  count(name="f1_driver_count", sort=TRUE) %>%
  ungroup() %>%
  mutate(f1_driver_pct = round(f1_driver_count/sum(f1_driver_count)*100,2))

compare <- summary_pl_teams %>%
  left_join(f1_driver)


# Fetch all seasons
#all_seasons <- fetch_data(base_url, headers)
```


## NO USE
```{r}
library(tidyverse)
library(httr)
library(jsonlite)

fetch_data <- function(base_url, api_key, pagination_key = "pagination", only_first_page = FALSE) {
  data <- list()
  url <- paste0(base_url, "?api_token=", api_key)
  headers <- c("Accept" = "application/json")

  while (!is.null(url)) {
    response <- GET(url, add_headers(.headers = headers))

    if (http_status(response)$category == "Success") {
      response_data <- content(response, "parsed")
      data <- c(data, response_data$data)

      # Check if there are more pages
      if (exists(pagination_key, response_data) && response_data[[pagination_key]]$has_more) {
        if (only_first_page) {
          # Return only the first page
          break
        } else {
          url <- paste0(response_data[[pagination_key]]$next_page, "&api_token=", api_key)
        }
      } else {
        url <- NULL
      }
    } else {
      # Handle error
      print(paste("Error:", http_status(response)$reason))
      break
    }
  }

  # Convert to JSON and then to data frame
  data_json <- toJSON(data, auto_unbox = TRUE)
  data_df <- as.data.frame(fromJSON(data_json))
  return(data_df)
}


```
## END NO USE

```{r}
# Get leagues, filter for PL = 8
# Get seasons, filter for current season = 23/24
# Get teams, filter for current season = 23/24 and include players, explode into long table
# For Player ID in list of players from teams, get country
```

```{r}
##
# Leagues
##
base_url <- "https://api.sportmonks.com/v3/football/leagues"
all_leagues <- fetch_data(base_url, headers, only_first_page = FALSE)
# PL id = 8

base_url <- "https://api.sportmonks.com/v3/football/leagues?include=name&filters=id:8"


```

```{r}
##
# Seasons
##
# Define API endpoint and authentication
base_url <- "https://api.sportmonks.com/v3/football/seasons"
#api_key <- "ZsmqzVHh2cx0AcBaTlnKuV4Wh3XuYSlyYuh6yEDLULKpPa42fnbggIIubhNL"

#test_seasons <- fetch_data(base_url, headers, only_first_page = TRUE)
all_seasons <- fetch_data(base_url, headers, pagination_key = "pagination", only_first_page = FALSE)
# PL current season id = 21646


```

```{r}
##
# Teams and Players
##
base_url <- "https://api.sportmonks.com/v3/football/teams/seasons/21646?include=players"
current_pl_teams_w_players <- fetch_data(base_url, headers, only_first_page = FALSE) 

library(tidyverse)
library(purrr)

#
# The data_frames column should now have tibbles/dataframes with consistent structure



#all_teams <- fetch_data(base_url, headers, only_first_page = FALSE)

#base_url <- "https://api.sportmonks.com/v3/football/teams/53?include=players"

```

```{r}
##
# Base URL 741444
##
base_url <- "https://api.sportmonks.com/v3/football/teams/seasons/21646?include=players"
```

```{r}
##
# Squads
##

base_url <- 'https://api.sportmonks.com/v3/football/squads/seasons/21646/teams/8' 
#test_seasons <- fetch_data(base_url, headers, only_first_page = TRUE)
liverpool_squad <- fetch_data(base_url, headers, only_first_page = TRUE)
#https://api.sportmonks.com/v3/football/squads/seasons/{seasonID}/teams/{teamID}
```

```{r}
##
# Countries
##
# Define API endpoint and authentication
base_url <- "https://api.sportmonks.com/v3/core/countries"
#test_seasons <- fetch_data(base_url, headers, only_first_page = TRUE)
all_countries <- fetch_data(base_url, headers, only_first_page = FALSE)
```


```{r}

##
# Players
##
base_url <- "https://api.sportmonks.com/v3/football/players"
test_players <- fetch_data(base_url, headers, only_first_page = TRUE)

```



```{r}
##
# States
##
base_url <- "https://api.sportmonks.com/v3/football/states"
#test_teams <- fetch_data(base_url, headers, only_first_page = TRUE)
all_states <- fetch_data(base_url, headers, only_first_page = FALSE)
```

```{r}
##
# Types
##
base_url <- "https://api.sportmonks.com/v3/core/types"
#test_teams <- fetch_data(base_url, headers, only_first_page = TRUE)
all_types <- fetch_data(base_url, headers, only_first_page = FALSE)
```

```{r}

base_url <- "https://api.sportmonks.com/v3/my/filters/entity"
all_entity <- fetch_data(base_url, headers, only_first_page = FALSE)


```


```{r}
# Install required packages
#install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)

# Define API endpoint and authentication
base_url <- "https://api.sportmonks.com/v3/football/seasons"
#api_token <- "ZsmqzVHh2cx0AcBaTlnKuV4Wh3XuYSlyYuh6yEDLULKpPa42fnbggIIubhNL"
# Install required packages
api_key <- "ZsmqzVHh2cx0AcBaTlnKuV4Wh3XuYSlyYuh6yEDLULKpPa42fnbggIIubhNL"

headers <- c(
    "Authorization" = api_key,
    "Accept" = "application/json"
  )

# Function to fetch seasons data with pagination
fetch_seasons <- function() {
  
  
  data <- list()
  #url <- modify_url(base_url, query = list(api_token = api_token))
  
  while (!is.null(url)) {
    response <- httr::GET(url,httr::add_headers(.headers = headers))
    
    if (http_status(response)$category == "Success") {
      response_data <- content(response, "parsed")
      data <- c(data, response_data$data)
      
      # Check if there are more pages
      if (response_data$pagination$has_more) {
        url <- response_data$pagination$next_page
      } else {
        url <- NULL
      }
    } else {
      # Handle error
      print(paste("Error:", http_status(response)$reason))
      break
    }
  }
  
  data <- data %>%
    toJSON() %>%
    fromJSON()
  
  return(data)
}

# Fetch all seasons
all_seasons <- fetch_seasons()

xall_seasons <- all_seasons %>% toJSON() %>% fromJSON() 

```

```{r}
# get league https://docs.sportmonks.com/football/endpoints-and-entities/endpoints/leagues/get-all-leagues
# get teams https://docs.sportmonks.com/football/endpoints-and-entities/endpoints/teams
# get squads https://docs.sportmonks.com/football/endpoints-and-entities/endpoints/team-squads
# get players https://docs.sportmonks.com/football/endpoints-and-entities/endpoints/players

###
# Vars
###
url_base <- "https://api.sportmonks.com/v3/football"
api_key <- "ZsmqzVHh2cx0AcBaTlnKuV4Wh3XuYSlyYuh6yEDLULKpPa42fnbggIIubhNL"
headers <- c(
    "Authorization" = api_key,
    "Accept" = "application/json"
  )

###
# Get premiere league current season
###
seasons_url <- paste0(url_base,"/seasons&sortBy=")
https://api.sportmonks.com/v3/football/fixtures&sortBy=starting_at&order=desc


response <- httr::GET(seasons_url, httr::add_headers(.headers = headers)) %>% content("parsed")
response <- response$data %>% toJSON() %>% fromJSON() 
###
# Get premiere league 
###

leagues_url <- paste0(url_base,"/leagues")


response <- httr::GET(leagues_url, httr::add_headers(.headers = headers)) %>% content("parsed")
response <- response$data %>% toJSON() %>% fromJSON() %>% 
  filter(str_detect(tolower(name),"premier")) %>%
  filter(country_id == "462") %>%
  select(id) %>%
  pull(id) %>%
  unlist()

###
# Get premiere league teams
###


teams_url <- paste0(url_base,"/teams","/462")

response <- httr::GET(teams_url, httr::add_headers(.headers = headers)) %>% content("parsed")
response <- response$data %>% toJSON() %>% fromJSON() 


  if (httr::status_code(response) == 200) {
    response_data <- httr::content(response, "parsed")
    if (!is.null(response_data$data) && length(response_data$data) > 0) {
      data <- do.call(rbind, lapply(response_data$data, as.data.frame))
      df <- as.data.frame(data)
    return(df) } else {
    error_message <- httr::content(response, "text")
    print(paste0("Failed to fetch data: ", httr::status_code(response), " - ", error_message))
    return(NULL)
  }}
}

# Replace 'your_api_key_here' with your actual Sportmonks API key
#api_key <- "mfou7aOZmxw5Y0DBa772xTs0rkIreQ8Y1zt7oWD9Gnu9uPT4ZUW0NXkBlBXy"


# Example usage: fetching players data
players_url <- "https://api.sportmonks.com/v3/football/players"
players_data <- get_data(players_url)
```

```{r}

library(httr)

url <- "https://api.sportmonks.com/v3/football/players"

get_data <- function(url) {
  headers <- c(
    "Authorization" = api_key,
    "Accept" = "application/json"
  )

  response <- httr::GET(url, httr::add_headers(.headers = headers))

  if (httr::status_code(response) == 200) {
    return(httr::content(response, "parsed"))
  } else {
    error_message <- httr::content(response, "text")
    print(paste0("Failed to fetch data: ", httr::status_code(response), " - ", error_message))
    return(NULL)
  }
}



write_players_to_csv <- function(players_data, filename) {
  players <- players_data$data

  if (!is.null(players)) {
    fieldnames <- c("id", "name", "country_id", "is_cup")
    players_df <- players %>%
      as.data.frame() %>%
      select(all_of(fieldnames))

    write.csv(players_df, file = filename, row.names = FALSE)
  } else {
    print("No players data to write.")
  }
}

# Replace 'your_api_key_here' with your actual Sportmonks API key
api_key <- "your_api_key_here"

players_data <- get_players(api_key)

if (!is.null(players_data)) {
  write_players_to_csv(players_data, "players.csv")
  print("Players data has been written to players.csv")
}
```

```{python}
import requests
import csv

def get_leagues(api_key):
    url = "https://api.sportmonks.com/v3/football/leagues?api_token="+api_key
    #headers = {
     #   "Accept": "application/json",
    #}
    #params = {
    #    "api_token": api_key,
    #}
    #response = requests.get(url, headers=headers, params=params)
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch data: {response.status_code}")
        return None

def write_leagues_to_csv(leagues_data, filename):
    # Assuming leagues_data['data'] is the list of leagues
    leagues = leagues_data.get('data', [])
    if leagues:
        # Define the CSV column names (adjust these based on the actual data structure)
        fieldnames = ['id', 'name', 'country_id', 'is_cup']
        
        with open(filename, mode='w', newline='', encoding='utf-8') as file:
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            for league in leagues:
                # Adjust the row dict if the structure of league objects is different
                row = {fieldname: league.get(fieldname, '') for fieldname in fieldnames}
                writer.writerow(row)
    else:
        print("No leagues data to write.")

# Replace 'your_api_key_here' with your actual Sportmonks API key
api_key = "mfou7aOZmxw5Y0DBa772xTs0rkIreQ8Y1zt7oWD9Gnu9uPT4ZUW0NXkBlBXy"
leagues_data = get_leagues(api_key)
if leagues_data:
    write_leagues_to_csv(leagues_data, 'leagues.csv')
    print("Leagues data has been written to leagues.csv")


```

```{python}
import requests
import csv

def get_leagues(api_key):
    url = "https://api.sportmonks.com/v3/football/players"
    headers = {
        #"Authorization": f"Bearer {api_key}",
        "Authorization": f"{api_key}",
        "Accept": "application/json"
    }

    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        return response.json()
    else:
        try:
            error_message = response.json()["error"]
        except (KeyError, ValueError):
            error_message = response.text
        print(f"Failed to fetch data: {response.status_code} - {error_message}")
        return None

def write_leagues_to_csv(leagues_data, filename):
    leagues = leagues_data.get('data', [])

    if leagues:
        fieldnames = ['id', 'name', 'country_id', 'is_cup']
        with open(filename, mode='w', newline='', encoding='utf-8') as file:
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            for league in leagues:
                row = {fieldname: league.get(fieldname, '') for fieldname in fieldnames}
                writer.writerow(row)
    else:
        print("No leagues data to write.")

# Replace 'your_api_key_here' with your actual Sportmonks API key
api_key = "bcpUN3aZz0hRfclc90kS4DVBRCe9G83mwr2juyYBwduPOHa5WaBXjA0TBd1H"

leagues_data = get_leagues(api_key)

if leagues_data:
    write_leagues_to_csv(leagues_data, 'players.csv')
    print("Leagues data has been written to leagues.csv")
```
